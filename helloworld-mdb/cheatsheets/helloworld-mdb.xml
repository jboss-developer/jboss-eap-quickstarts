<?xml version="1.0" encoding="UTF-8"?> 
<!-- JBoss, Home of Professional Open Source Copyright 2012, Red Hat, Inc.
    and/or its affiliates, and individual contributors by the @authors tag. See
    the copyright.txt in the distribution for a full listing of individual contributors.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not
    use this file except in compliance with the License. You may obtain a copy
    of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
    by applicable law or agreed to in writing, software distributed under the
    License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
    OF ANY KIND, either express or implied. See the License for the specific 
    language governing permissions and limitations under the License. -->
<cheatsheet title="EJB 3.1 Message-Driven Bean + Servlet 3.0 - HelloWorldMDB">
  <intro>
    <description>This quickstart shows you how to deploy a simple EJB 3.1 Message-Driven Bean to JBoss AS. We use here a Servlet 3.0 as Client to send several messages to the queue.
<br/><br/>
<b>	EJB 3.1 Message-Driven Bean</b>
<br/><br/>
Message-Driven Bean (MDB) is an enterprise bean that can be used in an Java EE 6 application to process asynchronously messages coming from a specific queue. it acts as a JMS message Listener.
<br/>
<br/>
</description>
</intro>
  <item
        skip="true"
        title="The helloworld mdb example in depth">
     <description>
    	 The helloworld mdb is very simple - all it does is send several messages by a sevlet 3.0 component.
The helloworld mdb example is comprised a servlet 3.0 as client <b>HelloWorldMDBServletClient</b> with a context <b>@WebServlet("/HelloWorldMDBServletClient")</b> that send several messages to a queue "queue/HELLOWORLDMDBQueue" or a topic "topic/HELLOWORLDMDBTopic" and a message-driven bean, that processes asynchronously messages from the specific queue.
The servlet client injects a connection factory <b>@@Resource(mappedName = "java:/ConnectionFactory") private ConnectionFactory connectionFactory;</b> to create a connection and a queue <b>@Resource(mappedName = "java:/queue/HELLOWORLDMDBQueue") private Queue queue;</b> and a topic <b>@Resource(mappedName = "java:/topic/HELLOWORLDMDBTopic") private Topic topic;</b>where messages need to be send. 
The message-driven bean class <b>HelloWorldMDB</b> achieves the requirements of a typical JMS listener through it annotation with <b>@MessageDriven(name = "HelloWorldMDB", activationConfig = {
		@ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Queue"),
		@ActivationConfigProperty(propertyName = "destination", propertyValue = "queue/HELLOWORLDMDBQueue"),
		@ActivationConfigProperty(propertyName = "acknowledgeMode", propertyValue = "Auto-acknowledge") })</b>
The message-driven bean processes the messages and print and print <b>(Thread-3 (group:HornetQ-client-global-threads-343422187)) Received Message from queue: This is message 3</b><br/><b>(Thread-4 (group:HornetQ-client-global-threads-343422187)) Received Message from queue: This is message 4</b><br/><b>(Thread-2 (group:HornetQ-client-global-threads-343422187)) Received Message from queue: This is message 2</b><br/><b>(Thread-0 (group:HornetQ-client-global-threads-343422187)) Received Message from queue: This is message 0</b><br/> on the log console. 
For sending message uses this url <b>http://localhost:8080//jboss-as-helloworld-mdb/HelloWorldMDBServletClient</b>.
    </description>         
  </item>
   <item
         title="HelloWorldMDBServletClient.java">
      <description>
      Hello World MDB Servlet Client- Servlet 3.0
      </description>
      <subitem
            label="If you've used Servlet before, then you'll remember having to use xml to register your servlets. Fortunately, this is a thing of the past. Now all you need to do is add the @WebServlet annotation, and provide a mapping to a URL used to access the servlet. Much cleaner!"
            skip="true">
		<action
			pluginId="org.jboss.tools.project.examples.cheatsheet"
			class="org.jboss.tools.project.examples.cheatsheet.actions.OpenFileInEditor"
			param1="/jboss-as-helloworld-mdb/src/main/java/org/jboss/as/quickstarts/servlet/HelloWorldMDBServletClient.java"/>
	  </subitem>
	  <subitem
            label="We Create message-driven bean to process messages from the queue."
            skip="true">
		<action
			pluginId="org.jboss.tools.project.examples.cheatsheet"
			class="org.jboss.tools.project.examples.cheatsheet.actions.OpenFileInEditor"
			param1="/jboss-as-helloworld-mdb/src/main/java/org/jboss/as/quickstarts/mdb/HelloWorldQueueMDB.java"/>
	  </subitem>
        <subitem
            label="We Create message-driven bean to process messages from the topic."
            skip="true">
            <action
                 pluginId="org.jboss.tools.project.examples.cheatsheet"
                 class="org.jboss.tools.project.examples.cheatsheet.actions.OpenFileInEditor"
                 param1="/jboss-as-helloworld-mdb/src/main/java/org/jboss/as/quickstarts/mdb/HelloWorldTopicMDB.java"/>
    </subitem>
  </item>  
  <item
        skip="true"
        title="Run and deploy the application">
     <description>
    	 Right-click the jboss-as-helloworld-mdb project and select <b>Run As</b> &gt; <b>Run On Server</b> or click on the &quot;Click to Perform&quot; link below. 
    </description>
    <action
		pluginId="org.jboss.tools.project.examples.cheatsheet"
		class="org.jboss.tools.project.examples.cheatsheet.actions.RunOnServer"
		param1="jboss-as-helloworld-mdb"/> 
  </item>
</cheatsheet>
