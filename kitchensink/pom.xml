<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
   <modelVersion>4.0.0</modelVersion>

   <groupId>org.jboss.as.quickstarts</groupId>
   <artifactId>jboss-as-kitchensink</artifactId>
   <version>7.0.1-SNAPSHOT</version>
   <packaging>war</packaging>

   <name>JBoss AS Quickstarts: Kitchensink</name>
   <description>A starter Java EE 6 webapp project for use on JBoss AS 7, generated from the jboss-javaee6-webapp archetype</description>
   <licenses>
      <license>
         <name>Apache License, Version 2.0</name>
         <distribution>repo</distribution>
         <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
      </license>
   </licenses>

   <properties>
      <!-- Explicitly declaring the source encoding eliminates the following 
         message: -->
      <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
         resources, i.e. build is platform dependent! -->
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <!-- Timestamp format for the maven.build.timestamp property -->
      <!-- You can reference property in pom.xml or filtered resources (must 
         enable third-party plugin if using Maven < 2.1) -->
      <maven.build.timestamp.format>yyyyMMdd'T'HHmmss</maven.build.timestamp.format>
      <!-- Specify the JBoss AS directory to be the JBOSS_HOME environment 
         variable -->
      <jboss.home>${env.JBOSS_HOME}</jboss.home>
   </properties>

   <repositories>
      <!-- The JBoss Community public repository is a composite repository 
         of several major repositories -->
      <!-- see http://community.jboss.org/wiki/MavenGettingStarted-Users -->
      <repository>
         <id>jboss-public-repository</id>
         <name>JBoss Repository</name>
         <url>http://repository.jboss.org/nexus/content/groups/public</url>
         <!-- These optional flags are designed to speed up your builds by 
            reducing remote server calls -->
         <releases>
            <enabled>true</enabled>
         </releases>
         <snapshots>
            <enabled>false</enabled>
         </snapshots>
      </repository>
   </repositories>

   <pluginRepositories>
      <pluginRepository>
         <id>jboss-public-repository</id>
         <name>JBoss Repository</name>
         <url>http://repository.jboss.org/nexus/content/groups/public</url>
         <releases>
            <enabled>true</enabled>
         </releases>
         <snapshots>
            <enabled>false</enabled>
         </snapshots>
      </pluginRepository>
   </pluginRepositories>
   
   <dependencyManagement>
      <dependencies>
         <!-- Define the version of JBoss' Java EE 6 APIs we want to import. 
            Any dependencies from org.jboss.spec will have their version defined by this 
            BOM -->
         <!-- JBoss distributes a complete set of Java EE 6 APIs including 
            a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or 
            a collection) of artifacts. We use this here so that we always get the correct 
            versions of artifacts. Here we use the jboss-javaee-web-6.0 stack (you can 
            read this as the JBoss stack of the Java EE Web Profile 6 APIs), and we use 
            version 2.0.0.Beta1 which is the latest release of the stack. You can actually 
            use this stack with any version of JBoss AS that implements Java EE 6, not 
            just JBoss AS 7! -->
         <dependency>
            <groupId>org.jboss.spec</groupId>
            <artifactId>jboss-javaee-web-6.0</artifactId>
            <version>2.0.0.Final</version>
            <type>pom</type>
            <scope>import</scope>
         </dependency>
      </dependencies>
   </dependencyManagement>

   <dependencies>
   
      <!-- First declare the APIs we depend on and need for compilation.
         All of them are provided by JBoss AS 7 -->
   
      <!-- Import the CDI API, we use provided scope as the API is included 
         in JBoss AS 7 -->
      <dependency>
         <groupId>javax.enterprise</groupId>
         <artifactId>cdi-api</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- Import the Common Annotations API (JSR-250), we use provided scope 
         as the API is included in JBoss AS 7 -->
      <dependency>
         <groupId>org.jboss.spec.javax.annotation</groupId>
         <artifactId>jboss-annotations-api_1.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>
      
      <!-- Import the JAX-RS API, we use provided scope 
         as the API is included in JBoss AS 7 -->
      <dependency>
         <groupId>org.jboss.spec.javax.ws.rs</groupId>
         <artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- Import the JPA API, we use provided scope as the API is included 
         in JBoss AS 7 -->
      <dependency>
         <groupId>org.hibernate.javax.persistence</groupId>
         <artifactId>hibernate-jpa-2.0-api</artifactId>
         <scope>provided</scope>
      </dependency>
      
      <!-- Import the EJB API, we use provided scope as the API is included 
         in JBoss AS 7 -->
      <dependency>
         <groupId>org.jboss.spec.javax.ejb</groupId>
         <artifactId>jboss-ejb-api_3.1_spec</artifactId>
         <scope>provided</scope>
      </dependency>
      
      <!-- JSR-303 (Bean Validation) Implementation -->
      <!-- Provides portable constraints such as @Email -->
      <!-- Hibernate Validator is shipped in JBoss AS 7 -->
      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-validator</artifactId>
         <version>4.1.0.Final</version>
         <scope>provided</scope>
         <exclusions>
            <exclusion>
               <groupId>org.slf4j</groupId>
               <artifactId>slf4j-api</artifactId>
            </exclusion>
         </exclusions>
      </dependency>
   
      <!-- Now we declare any tools needed -->
   
      <!-- Annotation processor to generate the JPA 2.0 metamodel classes 
         for typesafe criteria queries -->
      <dependency>
         <groupId>org.hibernate</groupId>
         <artifactId>hibernate-jpamodelgen</artifactId>
         <version>1.1.1.Final</version>
         <scope>provided</scope>
      </dependency>

      <!-- Needed for running tests (you may also use TestNG) -->
      <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <version>4.8.1</version>
         <scope>test</scope>
      </dependency>

      <!-- Optional, but highly recommended -->
      <!-- Arquillian allows you to test enterprise code such as EJBs and 
         Transactional(JTA) JPA from JUnit/TestNG -->
      <dependency>
         <groupId>org.jboss.arquillian.junit</groupId>
         <artifactId>arquillian-junit-container</artifactId>
         <version>1.0.0.CR4</version>
         <scope>test</scope>
      </dependency>
      
   </dependencies>

   <build>
      <!-- Maven will append the version to the finalName (which is the name 
         given to the generated war, and hence the context root) -->
      <finalName>${project.artifactId}</finalName>
      <plugins>
         <!-- Compiler plugin enforces Java 1.6 compatibility and activates 
            annotation processors -->
         <plugin>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>2.3.1</version>
            <configuration>
               <source>1.6</source>
               <target>1.6</target>
            </configuration>
         </plugin>
         <plugin>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.1.1</version>
            <configuration>
               <!-- Java EE 6 doesn't require web.xml, Maven needs to catch 
                  up! -->
               <failOnMissingWebXml>false</failOnMissingWebXml>
            </configuration>
         </plugin>
      </plugins>
   </build>

   <profiles>
      <profile>
         <!-- The default profile skips all tests, though you can tune it 
            to run just unit tests based on a custom pattern -->
         <!-- Seperate profiles are provided for running all tests, including 
            Arquillian tests that execute in the specified container -->
         <id>default</id>
         <activation>
            <activeByDefault>true</activeByDefault>
         </activation>
         <build>
            <plugins>
               <plugin>
                  <artifactId>maven-surefire-plugin</artifactId>
                  <version>2.4.3</version>
                  <configuration>
                     <skip>true</skip>
                  </configuration>
               </plugin>
               <!-- The JBoss AS plugin deploys your war to a local JBoss 
                  AS container -->
               <!-- To use, set the JBOSS_HOME environment variable and run: 
                  mvn package jboss-as:deploy -->
               <plugin>
                  <groupId>org.jboss.as.plugins</groupId>
                  <artifactId>jboss-as-maven-plugin</artifactId>
                  <version>7.0.1.Final</version>
               </plugin>
            </plugins>
         </build>
      </profile>
      
      <profile>
         <!-- An optional Arquillian testing profile that executes tests 
            in your JBoss AS instance -->
         <!-- This profile will start a new JBoss AS instance, and execute the
              test, shutting it down when done -->
         <!-- Run with: mvn clean test -Parq-jbossas-managed -->
         <id>arq-jbossas-managed</id>
         <dependencies>
            <dependency>
               <groupId>org.jboss.as</groupId>
               <artifactId>jboss-as-arquillian-container-managed</artifactId>
               <version>7.0.2.Final</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>
      
      <profile>
         <!-- An optional Arquillian testing profile that executes tests 
            in a remote JBoss AS instance -->
         <!-- Run with: mvn clean test -Parq-jbossas-remote -->
         <id>arq-jbossas-remote</id>
         <dependencies>
            <dependency>
               <groupId>org.jboss.as</groupId>
               <artifactId>jboss-as-arquillian-container-remote</artifactId>
               <version>7.0.2.Final</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>
      
      

   </profiles>
</project>
